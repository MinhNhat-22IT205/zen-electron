import {
  app,
  BrowserWindow,
  session,
  desktopCapturer,
  ipcRenderer,
  ipcMain,
  contextBridge,
} from "electron";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (partition: string): void => {
  // Create the browser window with unique session partition.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 1067,
    autoHideMenuBar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
      webSecurity: false,
      allowRunningInsecureContent: true,
      partition, // Unique partition for each window
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Handle screen sharing
  // mainWindow.webContents.on("did-finish-load", async () => {
  //   if (mainWindow) {
  //     desktopCapturer
  //       .getSources({ types: ["window", "screen"] })
  //       .then(async (sources) => {
  //         mainWindow.webContents.send("SEND_SCREEN_SHARE_SOURCES", sources);
  //       });
  //   }
  // });

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

app.on(
  "certificate-error",
  (event, webContents, url, error, certificate, callback) => {
    event.preventDefault();
    callback(true); // Trust the self-signed certificate
  },
);

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow("persist:window1");
  createWindow("persist:window2");
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow("persist:window1");
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.handle("GET_SCREEN_SHARE_SOURCES", () => {
  return desktopCapturer
    .getSources({ types: ["window", "screen"] })
    .then(async (sources) => {
      return sources;
    });
});
